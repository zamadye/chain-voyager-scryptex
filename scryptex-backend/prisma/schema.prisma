
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(cuid())
  walletAddress String @unique
  email       String?  @unique
  username    String?  @unique
  nonce       String?
  isActive    Boolean  @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions      UserSession[]
  preferences   UserPreference?
  deployments   ContractDeployment[]
  transactions  Transaction[]
  gmPosts       GMPost[]
  activities    UserActivity[]
  userChains    UserChain[]
  swapTransactions SwapTransaction[]

  @@map("users")
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  token        String    @unique
  refreshToken String    @unique
  expiresAt    DateTime
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  defaultChains     Int[]    @default([])
  notificationSettings Json?
  theme             String   @default("dark")
  language          String   @default("en")
  timezone          String   @default("UTC")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Chain Management
model Chain {
  id            String   @id @default(cuid())
  chainId       Int      @unique
  name          String
  displayName   String
  rpcUrl        String
  explorerUrl   String?
  faucetUrl     String?
  nativeCurrency Json    // {symbol, name, decimals}
  isActive      Boolean  @default(true)
  isTestnet     Boolean  @default(true)
  iconUrl       String?
  description   String?
  features      String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  status        ChainStatus?
  deployments   ContractDeployment[]
  transactions  Transaction[]
  gmPosts       GMPost[]
  userChains    UserChain[]
  swapTransactions SwapTransaction[]
  metrics       ChainMetric[]

  @@map("chains")
}

model ChainStatus {
  id                String    @id @default(cuid())
  chainId           Int       @unique
  blockHeight       BigInt    @default(0)
  gasPrice          String?   // In gwei
  isHealthy         Boolean   @default(true)
  avgBlockTime      Int?      // In milliseconds
  networkCongestion String?   // LOW, MEDIUM, HIGH
  rpcLatency        Int?      // In milliseconds
  lastUpdated       DateTime  @default(now())

  // Relations
  chain Chain @relation(fields: [chainId], references: [chainId], onDelete: Cascade)

  @@map("chain_statuses")
}

model UserChain {
  id            String   @id @default(cuid())
  userId        String
  chainId       Int
  isActive      Boolean  @default(true)
  priorityOrder Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain Chain @relation(fields: [chainId], references: [chainId], onDelete: Cascade)

  @@unique([userId, chainId])
  @@map("user_chains")
}

// Contract Management
model ContractTemplate {
  id            String   @id @default(cuid())
  name          String
  description   String
  category      String
  solidityCode  String
  parameters    Json     @default("[]") // Array of parameter definitions
  tags          String[] @default([])
  isActive      Boolean  @default(true)
  gasEstimate   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  deployments ContractDeployment[]

  @@map("contract_templates")
}

enum DeploymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

model ContractDeployment {
  id              String           @id @default(cuid())
  userId          String
  chainId         Int
  templateId      String
  contractAddress String?
  transactionHash String?
  status          DeploymentStatus @default(PENDING)
  parameters      String?          // JSON string of deployment parameters
  gasSettings     String?          // JSON string of gas settings
  gasUsed         String?
  gasEstimate     String?
  deploymentCost  String?
  blockNumber     String?
  error           String?
  isVerified      Boolean          @default(false)
  verificationDetails String?      // JSON string
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain    Chain            @relation(fields: [chainId], references: [chainId], onDelete: Cascade)
  template ContractTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  parameters DeploymentParameter[]

  @@map("contract_deployments")
}

model DeploymentParameter {
  id           String @id @default(cuid())
  deploymentId String
  parameterName String
  parameterValue String
  parameterType String

  // Relations
  deployment ContractDeployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade)

  @@map("deployment_parameters")
}

// Transaction Management
enum TransactionType {
  DEPLOYMENT
  SWAP
  GM_POST
  INTERACTION
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
}

model Transaction {
  id              String            @id @default(cuid())
  userId          String
  chainId         Int
  transactionHash String
  transactionType TransactionType
  status          TransactionStatus @default(PENDING)
  gasUsed         String?
  gasPaid         String?
  blockNumber     String?
  value           String?           @default("0")
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain Chain @relation(fields: [chainId], references: [chainId], onDelete: Cascade)

  @@map("transactions")
}

model SwapTransaction {
  id           String            @id @default(cuid())
  userId       String
  fromChainId  Int
  toChainId    Int?
  fromToken    String
  toToken      String
  amountIn     String
  amountOut    String?
  slippage     String           @default("0.5")
  status       TransactionStatus @default(PENDING)
  transactionHash String?
  error        String?
  metadata     Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromChain Chain @relation(fields: [fromChainId], references: [chainId], onDelete: Cascade)

  @@map("swap_transactions")
}

model GMPost {
  id              String   @id @default(cuid())
  userId          String
  chainId         Int
  message         String   @default("gm")
  transactionHash String?
  postDate        DateTime @default(now())
  streakCount     Int      @default(1)
  gasUsed         String?
  createdAt       DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chain Chain @relation(fields: [chainId], references: [chainId], onDelete: Cascade)

  @@map("gm_posts")
}

// Analytics
enum ActivityType {
  LOGIN
  DEPLOYMENT
  SWAP
  GM_POST
  CHAIN_SWITCH
  TEMPLATE_VIEW
}

model UserActivity {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  chainId      Int?
  metadata     Json?
  createdAt    DateTime     @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model ChainMetric {
  id                   String   @id @default(cuid())
  chainId              Int
  date                 DateTime
  totalTransactions    Int      @default(0)
  totalDeployments     Int      @default(0)
  successfulDeployments Int     @default(0)
  totalGasUsed         BigInt   @default(0)
  avgGasPrice          String?
  uniqueUsers          Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  chain Chain @relation(fields: [chainId], references: [chainId], onDelete: Cascade)

  @@unique([chainId, date])
  @@map("chain_metrics")
}

model RewardTracking {
  id                String   @id @default(cuid())
  userId            String
  chainId           Int
  estimatedReward   String   @default("0")
  qualificationScore Int     @default(0)
  lastActivity      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, chainId])
  @@map("reward_tracking")
}
